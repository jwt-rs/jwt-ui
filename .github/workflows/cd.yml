name: Continuous Deployment

on:
  push:
    tags:
      - "v*.*.*"
permissions:
  contents: write
jobs:
  create-github-release:
    name: create-github-release
    runs-on: ubuntu-latest
    steps:
      - name: Create artifacts directory
        run: mkdir artifacts
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: |
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            echo "Manual run against a tag; overriding actual tag in the environment..."
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
      - name: Validate version environment variable
        run: echo "Version being built against is version ${{ env.VERSION }}"!
      - name: Save version number to artifact
        run: echo "${{ env.VERSION }}" > artifacts/release-version
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: artifacts

  build-release-artifacts:
    name: build-release
    needs: [create-github-release]
    runs-on: ${{ matrix.job.os }}
    env:
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        # prettier-ignore
        job:
            - { name: "macOS-arm64",        os: "macOS-latest",   target: "aarch64-apple-darwin",           artifact_suffix: "macos-arm64",     use-cross: true                          }
            - { name: "macOS-amd64",        os: "macOS-latest",   target: "x86_64-apple-darwin",            artifact_suffix: "macos"                                                     }
            - { name: "windows-amd64",      os: "windows-latest", target: "x86_64-pc-windows-msvc",         artifact_suffix: "windows"                                                   }
            - { name: "windows-aarch64",    os: "windows-latest", target: "aarch64-pc-windows-msvc",        artifact_suffix: "windows-aarch64", use-cross: true                          }
            - { name: "linux-gnu",          os: "ubuntu-latest",  target: "x86_64-unknown-linux-gnu",       artifact_suffix: "linux"                                                     }
            - { name: "linux-musl",         os: "ubuntu-latest",  target: "x86_64-unknown-linux-musl",      artifact_suffix: "linux-musl",      use-cross: true,                         }
            - { name: "linux-aarch64-gnu",  os: "ubuntu-latest",  target: "aarch64-unknown-linux-gnu",      artifact_suffix: "aarch64-gnu",     use-cross: true, test-bin: "--bin jwtui" }
            - { name: "linux-aarch64-musl", os: "ubuntu-latest",  target: "aarch64-unknown-linux-musl",     artifact_suffix: "aarch64-musl",    use-cross: true, test-bin: "--bin jwtui" }
            - { name: "linux-arm-gnu",      os: "ubuntu-latest",  target: "arm-unknown-linux-gnueabi",      artifact_suffix: "armv6-gnu",       use-cross: true, test-bin: "--bin jwtui" }
            - { name: "linux-arm-musl",     os: "ubuntu-latest",  target: "arm-unknown-linux-musleabihf",   artifact_suffix: "armv6-musl",      use-cross: true, test-bin: "--bin jwtui" }
            - { name: "linux-armv7-gnu",    os: "ubuntu-latest",  target: "armv7-unknown-linux-gnueabihf",  artifact_suffix: "armv7-gnu",       use-cross: true, test-bin: "--bin jwtui" }
            - { name: "linux-armv7-musl",   os: "ubuntu-latest",  target: "armv7-unknown-linux-musleabihf", artifact_suffix: "armv7-musl",      use-cross: true, test-bin: "--bin jwtui" }
        rust: [stable]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/cache@v3
        name: Cache Cargo registry
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('Cargo.lock') }}
      - uses: actions/cache@v3
        if: startsWith(matrix.job.name, 'linux-')
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ hashFiles('.github/workflows/cd.yml') }}
      - name: Get shared artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: artifacts

      - name: Set release version
        shell: bash
        run: |
          release_version="$(cat ./artifacts/release-version)"
          echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

      - name: Validate release environment variables
        run: |
          echo "Release version: ${{ env.RELEASE_VERSION }}"

      - uses: dtolnay/rust-toolchain@stable
        name: Set Rust toolchain
        with:
          targets: ${{ matrix.job.target }}
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          # NB: sets CARGO_BUILD_TARGET evar - do not need --target flag in build
          target: ${{ matrix.job.target }}
      - uses: taiki-e/install-action@cross
        if: ${{ matrix.job.use-cross }}

      - name: Installing needed Ubuntu dependencies
        if: matrix.job.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get -y update
          case ${{ matrix.job.target }} in
            arm*-linux-*) sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
            aarch64-*-linux-*) sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac

      - name: Build
        run: cargo build --release --verbose --target=${{ matrix.job.target }} --locked

      - name: Verify file
        shell: bash
        run: |
          file target/${{ matrix.job.target }}/release/jwtui

      - name: Test
        if: matrix.job.target != 'aarch64-apple-darwin' && matrix.job.target != 'aarch64-pc-windows-msvc'
        run: cargo test --release --verbose --target=${{ matrix.job.target }} ${{ matrix.job.test-bin }}

      - name: Packaging final binary (Windows)
        if: matrix.job.os == 'windows-latest'
        shell: bash
        run: |
          cd target/${{ matrix.job.target }}/release
          BINARY_NAME=jwtui.exe
          if [ "${{ matrix.job.target }}" != "aarch64-pc-windows-msvc" ]; then
            # strip the binary
            strip $BINARY_NAME
          fi
          RELEASE_NAME=jwtui-${{ matrix.job.artifact_suffix }}
          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME
          # create sha checksum files
          certutil -hashfile $RELEASE_NAME.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > $RELEASE_NAME.sha256
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Packaging final binary (macOS and Linux)
        if: matrix.job.os != 'windows-latest'
        shell: bash
        run: |
          # set the right strip executable
          STRIP="strip"; 
          case ${{ matrix.job.target }} in 
            arm*-linux-*) STRIP="arm-linux-gnueabihf-strip" ;; 
            aarch64-*-linux-*) STRIP="aarch64-linux-gnu-strip" ;;
          esac;
          cd target/${{ matrix.job.target }}/release
          BINARY_NAME=jwtui
          # strip the binary
          "$STRIP" "$BINARY_NAME"
          RELEASE_NAME=jwtui-${{ matrix.job.artifact_suffix }}
          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME
          # create sha checksum files
          shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.job.target }}/release/${{ env.RELEASE_NAME }}.tar.gz
            target/${{ matrix.job.target }}/release/${{ env.RELEASE_NAME }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add SHA to artifacts
        run: |
          cp target/${{ matrix.job.target }}/release/${{ env.RELEASE_NAME }}.sha256 artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: artifacts

  publish-homebrew-formula:
    needs: [build-release-artifacts]
    name: Update homebrew formula
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get release artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: artifacts

      - name: Set release assets and version
        shell: bash
        run: |
          macos_sha="$(cat ./artifacts/jwtui-macos.sha256 | awk '{print $1}')"
          echo "MACOS_SHA=$macos_sha" >> $GITHUB_ENV
          macos_sha_arm="$(cat ./artifacts/jwtui-macos-arm64.sha256 | awk '{print $1}')"
          echo "MACOS_SHA_ARM=$macos_sha_arm" >> $GITHUB_ENV
          linux_sha="$(cat ./artifacts/jwtui-linux-musl.sha256 | awk '{print $1}')"
          echo "LINUX_SHA=$linux_sha" >> $GITHUB_ENV          
          release_version="$(cat ./artifacts/release-version)"
          echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

      - name: Validate release environment variables
        run: |
          echo "Release SHA macos: ${{ env.MACOS_SHA }}"
          echo "Release SHA macos-arm: ${{ env.MACOS_SHA_ARM }}"
          echo "Release SHA linux musl: ${{ env.LINUX_SHA }}"
          echo "Release version: ${{ env.RELEASE_VERSION }}"

      - name: Execute Homebrew packaging script
        run: |
          # run packaging script
          python "./deployment/homebrew/packager.py" ${{ env.RELEASE_VERSION }} "./deployment/homebrew/jwt-ui.rb.template" "./jwt-ui.rb" ${{ env.MACOS_SHA }} ${{ env.MACOS_SHA_ARM }} ${{ env.LINUX_SHA }}
          
          # push to Git
          git config --global user.email "d4udts@gmail.com"
          git config --global user.name "deepu105"
          git clone https://deepu105:${{ secrets.JWT_RS_GITHUB_TOKEN }}@github.com/jwt-rs/homebrew-jwt-ui.git --branch=main brew
          rm brew/Formula/jwt-ui.rb
          cp jwt-ui.rb brew/Formula
          cd brew
          git add .
          git diff-index --quiet HEAD || git commit -am "Update formula for jwt-ui release ${{ env.RELEASE_VERSION }}"
          git push origin main

  publish-scoop-formula:
    needs: [build-release-artifacts]
    name: Update scoop formulas
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get release artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: artifacts

      - name: Set release assets and version
        shell: bash
        run: |
          windows_sha="$(cat ./artifacts/jwtui-windows.sha256 | awk '{print $1}')"
          echo "WINDOWS_SHA=$windows_sha" >> $GITHUB_ENV
          release_version="$(cat ./artifacts/release-version)"
          echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

      - name: Validate release environment variables
        run: |
          echo "Release SHA windows: ${{ env.WINDOWS_SHA }}"
          echo "Release version: ${{ env.RELEASE_VERSION }}"

      - name: Execute Scoop packaging script
        run: |
          # run packaging script
          python "./deployment/scoop/packager.py" ${{ env.RELEASE_VERSION }} "./deployment/scoop/jwt-ui.json.template" "./jwt-ui.json" ${{ env.WINDOWS_SHA }}

          # push to Git
          git config --global user.email "d4udts@gmail.com"
          git config --global user.name "deepu105"
          git clone https://deepu105:${{ secrets.JWT_RS_GITHUB_TOKEN }}@github.com/jwt-rs/scoop-jwt-ui --branch=main scoop
          rm scoop/jwt-ui.json
          cp jwt-ui.json scoop/jwt-ui.json
          cd scoop
          git add .
          git diff-index --quiet HEAD || git commit -am "Update package for jwt-ui release ${{ env.RELEASE_VERSION }}"
          git push origin main

  publish-cargo:
    needs: [build-release-artifacts]
    name: Publishing to Cargo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        name: Cache Cargo registry
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('Cargo.lock') }}
      - uses: actions/cache@v3
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-bin-${{ hashFiles('.github/workflows/cd.yml') }}
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo publish --token ${{ secrets.CARGO_API_KEY }} --allow-dirty

  publish-docker-image:
    needs: [build-release-artifacts]
    name: Publishing Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Get release artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: artifacts

      - name: Set release version
        shell: bash
        run: |
          release_version="$(cat ./artifacts/release-version)"
          echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

      - name: Validate release environment variables
        run: |
          echo "Release version: ${{ env.RELEASE_VERSION }}"
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          tags: deepu105/jwt-ui:latest, deepu105/jwt-ui:${{ env.RELEASE_VERSION }}
          push: true
